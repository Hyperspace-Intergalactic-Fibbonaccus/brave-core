diff --git a/content/browser/media/media_interface_proxy.cc b/content/browser/media/media_interface_proxy.cc
index 82b0c8c61ac4fc623056c96e62a002c1a8c79067..ecfdd46d0367977a7d4bc7079a9b734a964a416b 100644
--- a/content/browser/media/media_interface_proxy.cc
+++ b/content/browser/media/media_interface_proxy.cc
@@ -120,7 +120,7 @@ MediaInterfaceProxy::MediaInterfaceProxy(
     const base::Closure& error_handler)
     : render_frame_host_(render_frame_host),
       binding_(this, std::move(request)) {
-  DVLOG(1) << __func__;
+  LOG(ERROR) << __func__;
   DCHECK(render_frame_host_);
   DCHECK(!error_handler.is_null());
 
@@ -131,12 +131,13 @@ MediaInterfaceProxy::MediaInterfaceProxy(
 }
 
 MediaInterfaceProxy::~MediaInterfaceProxy() {
-  DVLOG(1) << __func__;
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(thread_checker_.CalledOnValidThread());
 }
 
 void MediaInterfaceProxy::CreateAudioDecoder(
     media::mojom::AudioDecoderRequest request) {
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(thread_checker_.CalledOnValidThread());
   InterfaceFactory* factory = GetMediaInterfaceFactory();
   if (factory)
@@ -145,6 +146,7 @@ void MediaInterfaceProxy::CreateAudioDecoder(
 
 void MediaInterfaceProxy::CreateVideoDecoder(
     media::mojom::VideoDecoderRequest request) {
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(thread_checker_.CalledOnValidThread());
   InterfaceFactory* factory = GetMediaInterfaceFactory();
   if (factory)
@@ -155,6 +157,7 @@ void MediaInterfaceProxy::CreateRenderer(
     media::mojom::HostedRendererType type,
     const std::string& type_specific_id,
     media::mojom::RendererRequest request) {
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(thread_checker_.CalledOnValidThread());
 
 #if defined(OS_ANDROID)
@@ -183,21 +186,29 @@ void MediaInterfaceProxy::CreateRenderer(
 void MediaInterfaceProxy::CreateCdm(
     const std::string& key_system,
     media::mojom::ContentDecryptionModuleRequest request) {
+  LOG(ERROR) << "BSC]] MediaInterfaceProxy::CreateCdm 1";
   DCHECK(thread_checker_.CalledOnValidThread());
 #if !BUILDFLAG(ENABLE_LIBRARY_CDMS)
+  LOG(ERROR) << "BSC]] MediaInterfaceProxy::CreateCdm - ENABLE_LIBRARY_CDMS=false";
   auto* factory = GetMediaInterfaceFactory();
   if (factory)
     factory->CreateCdm(key_system, std::move(request));
 #else
+  LOG(ERROR) << "BSC]] MediaInterfaceProxy::CreateCdm - ENABLE_LIBRARY_CDMS=true";
   auto* factory = GetCdmFactory(key_system);
-  if (factory)
+  if (factory) {
+    LOG(ERROR) << "BSC]] factory->CreateCdm";
     factory->CreateCdm(key_system, std::move(request));
+  } else {
+    LOG(ERROR) << "BSC]] GetCdmFactory is falsey?";
+  }
 #endif
 }
 
 void MediaInterfaceProxy::CreateDecryptor(
     int cdm_id,
     media::mojom::DecryptorRequest request) {
+  LOG(ERROR) << "BSC]] " << __func__;
   InterfaceFactory* factory = GetMediaInterfaceFactory();
   if (factory)
     factory->CreateDecryptor(cdm_id, std::move(request));
@@ -206,6 +217,7 @@ void MediaInterfaceProxy::CreateDecryptor(
 void MediaInterfaceProxy::CreateCdmProxy(
     const std::string& cdm_guid,
     media::mojom::CdmProxyRequest request) {
+  LOG(ERROR) << "BSC]] " << __func__;
   NOTREACHED() << "The CdmProxy should only be created by a CDM.";
 }
 
@@ -255,6 +267,8 @@ media::mojom::InterfaceFactory*
 MediaInterfaceProxy::GetMediaInterfaceFactory() {
   DCHECK(thread_checker_.CalledOnValidThread());
 
+  LOG(ERROR) << "BSC]] " << __func__;
+
   if (!interface_factory_ptr_)
     ConnectToMediaService();
 
@@ -262,7 +276,7 @@ MediaInterfaceProxy::GetMediaInterfaceFactory() {
 }
 
 void MediaInterfaceProxy::ConnectToMediaService() {
-  DVLOG(1) << __func__;
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(!interface_factory_ptr_);
 
   media::mojom::MediaServicePtr media_service;
@@ -282,7 +296,7 @@ void MediaInterfaceProxy::ConnectToMediaService() {
 }
 
 void MediaInterfaceProxy::OnMediaServiceConnectionError() {
-  DVLOG(1) << __func__;
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(thread_checker_.CalledOnValidThread());
 
   interface_factory_ptr_.reset();
@@ -292,6 +306,8 @@ void MediaInterfaceProxy::OnMediaServiceConnectionError() {
 
 media::mojom::CdmFactory* MediaInterfaceProxy::GetCdmFactory(
     const std::string& key_system) {
+  LOG(ERROR) << "BSC]] " << __func__;
+
   DCHECK(thread_checker_.CalledOnValidThread());
 
   std::string cdm_guid;
@@ -301,18 +317,22 @@ media::mojom::CdmFactory* MediaInterfaceProxy::GetCdmFactory(
   std::unique_ptr<CdmInfo> cdm_info =
       KeySystemSupportImpl::GetCdmInfoForKeySystem(key_system);
   if (!cdm_info) {
+    LOG(ERROR) << "BSC]] No valid CdmInfo for " << key_system;
     NOTREACHED() << "No valid CdmInfo for " << key_system;
     return nullptr;
   }
   if (cdm_info->path.empty()) {
+    LOG(ERROR) << "BSC]] CDM path for " << key_system << " is empty.";
     NOTREACHED() << "CDM path for " << key_system << " is empty.";
     return nullptr;
   }
   if (!base::IsValidGUID(cdm_info->guid)) {
+    LOG(ERROR) << "BSC]] Invalid CDM GUID " << cdm_info->guid;
     NOTREACHED() << "Invalid CDM GUID " << cdm_info->guid;
     return nullptr;
   }
   if (!CdmStorageImpl::IsValidCdmFileSystemId(cdm_info->file_system_id)) {
+    LOG(ERROR) << "BSC]] Invalid file system ID " << cdm_info->file_system_id;
     NOTREACHED() << "Invalid file system ID " << cdm_info->file_system_id;
     return nullptr;
   }
@@ -331,7 +351,7 @@ media::mojom::CdmFactory* MediaInterfaceProxy::ConnectToCdmService(
     const std::string& cdm_guid,
     const base::FilePath& cdm_path,
     const std::string& cdm_file_system_id) {
-  DVLOG(1) << __func__ << ": cdm_guid = " << cdm_guid;
+  LOG(ERROR) << __func__ << ": cdm_guid = " << cdm_guid;
 
   DCHECK(!cdm_factory_map_.count(cdm_guid));
   service_manager::Identity identity(media::mojom::kCdmServiceName,
@@ -354,16 +374,20 @@ media::mojom::CdmFactory* MediaInterfaceProxy::ConnectToCdmService(
 
   cdm_service->LoadCdm(cdm_path, std::move(token_provider_ptr));
 #else
+  LOG(ERROR) << "BSC]] calling cdm_service->LoadCdm";
   cdm_service->LoadCdm(cdm_path);
 #endif  // defined(OS_MACOSX)
 
+  LOG(ERROR) << "BSC]] calling cdm_service->CreateCdmFactory";
   media::mojom::CdmFactoryPtr cdm_factory_ptr;
   cdm_service->CreateCdmFactory(MakeRequest(&cdm_factory_ptr),
                                 GetFrameServices(cdm_guid, cdm_file_system_id));
+  LOG(ERROR) << "BSC]] factory.set_connection_error_handler";
   cdm_factory_ptr.set_connection_error_handler(
       base::BindOnce(&MediaInterfaceProxy::OnCdmServiceConnectionError,
                      base::Unretained(this), cdm_guid));
 
+  LOG(ERROR) << "BSC]] calling returning cdm_factory";
   auto* cdm_factory = cdm_factory_ptr.get();
   cdm_factory_map_.emplace(cdm_guid, std::move(cdm_factory_ptr));
   return cdm_factory;
@@ -371,7 +395,7 @@ media::mojom::CdmFactory* MediaInterfaceProxy::ConnectToCdmService(
 
 void MediaInterfaceProxy::OnCdmServiceConnectionError(
     const std::string& cdm_guid) {
-  DVLOG(1) << __func__;
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(thread_checker_.CalledOnValidThread());
 
   DCHECK(cdm_factory_map_.count(cdm_guid));
@@ -381,7 +405,7 @@ void MediaInterfaceProxy::OnCdmServiceConnectionError(
 void MediaInterfaceProxy::CreateCdmProxyInternal(
     const std::string& cdm_guid,
     media::mojom::CdmProxyRequest request) {
-  DVLOG(1) << __func__;
+  LOG(ERROR) << "BSC]] " << __func__;
   DCHECK(thread_checker_.CalledOnValidThread());
 
   InterfaceFactory* factory = GetMediaInterfaceFactory();
