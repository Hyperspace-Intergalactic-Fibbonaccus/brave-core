diff --git a/media/blink/cdm_session_adapter.cc b/media/blink/cdm_session_adapter.cc
index 203103bf5e0f6d0ce88650afc5fe8a4dc199e6e6..7aae79904c5ee5f2ce44162b9d91e1217d2f2cbd 100644
--- a/media/blink/cdm_session_adapter.cc
+++ b/media/blink/cdm_session_adapter.cc
@@ -46,6 +46,8 @@ void CdmSessionAdapter::CreateCdm(
   TRACE_EVENT_ASYNC_BEGIN0("media", "CdmSessionAdapter::CreateCdm",
                            ++trace_id_);
 
+  LOG(ERROR) << "BSC]] CdmSessionAdapter::CreateCdm - calling cdm_factory.Create";
+
   base::TimeTicks start_time = base::TimeTicks::Now();
 
   // Note: WebContentDecryptionModuleImpl::Create() calls this method without
@@ -112,7 +114,7 @@ void CdmSessionAdapter::LoadSession(
     CdmSessionType session_type,
     const std::string& session_id,
     std::unique_ptr<NewSessionCdmPromise> promise) {
-  DVLOG(2) << __func__ << ": session_id = " << session_id;
+  LOG(ERROR) << __func__ << ": session_id = " << session_id;
   cdm_->LoadSession(session_type, session_id, std::move(promise));
 }
 
@@ -120,26 +122,26 @@ void CdmSessionAdapter::UpdateSession(
     const std::string& session_id,
     const std::vector<uint8_t>& response,
     std::unique_ptr<SimpleCdmPromise> promise) {
-  DVLOG(3) << __func__ << ": session_id = " << session_id;
+  LOG(ERROR) << __func__ << ": session_id = " << session_id;
   cdm_->UpdateSession(session_id, response, std::move(promise));
 }
 
 void CdmSessionAdapter::CloseSession(
     const std::string& session_id,
     std::unique_ptr<SimpleCdmPromise> promise) {
-  DVLOG(2) << __func__ << ": session_id = " << session_id;
+  LOG(ERROR) << __func__ << ": session_id = " << session_id;
   cdm_->CloseSession(session_id, std::move(promise));
 }
 
 void CdmSessionAdapter::RemoveSession(
     const std::string& session_id,
     std::unique_ptr<SimpleCdmPromise> promise) {
-  DVLOG(2) << __func__ << ": session_id = " << session_id;
+  LOG(ERROR) << __func__ << ": session_id = " << session_id;
   cdm_->RemoveSession(session_id, std::move(promise));
 }
 
 std::unique_ptr<CdmContextRef> CdmSessionAdapter::GetCdmContextRef() {
-  DVLOG(2) << __func__;
+  LOG(ERROR) << __func__;
 
   if (!cdm_->GetCdmContext()) {
     NOTREACHED() << "All CDMs should support CdmContext.";
@@ -163,7 +165,7 @@ void CdmSessionAdapter::OnCdmCreated(
     base::TimeTicks start_time,
     const scoped_refptr<ContentDecryptionModule>& cdm,
     const std::string& error_message) {
-  DVLOG(1) << __func__ << ": "
+  LOG(ERROR) << __func__ << ": "
            << (cdm ? "success" : "failure (" + error_message + ")");
   DCHECK(!cdm_);
 
@@ -181,6 +183,7 @@ void CdmSessionAdapter::OnCdmCreated(
         blink::kWebContentDecryptionModuleExceptionNotSupportedError, 0,
         blink::WebString::FromUTF8(error_message));
     cdm_created_result_.reset();
+    LOG(ERROR) << "BSC]] OnCdmCreated - cdm is falsey";
     return;
   }
 
@@ -205,7 +208,7 @@ void CdmSessionAdapter::OnSessionMessage(const std::string& session_id,
   DLOG_IF(WARNING, !session) << __func__ << " for unknown session "
                              << session_id;
   if (session) {
-    DVLOG(3) << __func__ << ": session_id = " << session_id;
+    LOG(ERROR) << __func__ << ": session_id = " << session_id;
     session->OnSessionMessage(message_type, message);
   }
 }
@@ -217,10 +220,10 @@ void CdmSessionAdapter::OnSessionKeysChange(const std::string& session_id,
   DLOG_IF(WARNING, !session) << __func__ << " for unknown session "
                              << session_id;
   if (session) {
-    DVLOG(2) << __func__ << ": session_id = " << session_id;
-    DVLOG(2) << "  - has_additional_usable_key = " << has_additional_usable_key;
+    LOG(ERROR) << __func__ << ": session_id = " << session_id;
+    LOG(ERROR) << "  - has_additional_usable_key = " << has_additional_usable_key;
     for (const auto& info : keys_info)
-      DVLOG(2) << "  - " << *(info.get());
+      LOG(ERROR) << "  - " << *(info.get());
 
     session->OnSessionKeysChange(has_additional_usable_key,
                                  std::move(keys_info));
@@ -233,11 +236,11 @@ void CdmSessionAdapter::OnSessionExpirationUpdate(const std::string& session_id,
   DLOG_IF(WARNING, !session) << __func__ << " for unknown session "
                              << session_id;
   if (session) {
-    DVLOG(2) << __func__ << ": session_id = " << session_id;
+    LOG(ERROR) << __func__ << ": session_id = " << session_id;
     if (new_expiry_time.is_null())
-      DVLOG(2) << "  - new_expiry_time = NaN";
+      LOG(ERROR) << "  - new_expiry_time = NaN";
     else
-      DVLOG(2) << "  - new_expiry_time = " << new_expiry_time;
+      LOG(ERROR) << "  - new_expiry_time = " << new_expiry_time;
 
     session->OnSessionExpirationUpdate(new_expiry_time);
   }
@@ -248,7 +251,7 @@ void CdmSessionAdapter::OnSessionClosed(const std::string& session_id) {
   DLOG_IF(WARNING, !session) << __func__ << " for unknown session "
                              << session_id;
   if (session) {
-    DVLOG(2) << __func__ << ": session_id = " << session_id;
+    LOG(ERROR) << __func__ << ": session_id = " << session_id;
     session->OnSessionClosed();
   }
 }
